name: Android CI/CD with SAST

on:
  push:
    branches: [ "master", "cicd", "testing" ]
  pull_request:
    branches: [ "master" ]


jobs:
    #1.0 sast
    sast:
        permissions:
          contents: read # for actions/checkout to fetch code
          security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
          actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
        runs-on: ubuntu-latest
    
        steps:
          #1.1 checkout
        - uses: actions/checkout@v3
          
          #1.2 setup python 
        - name: Setup python
          uses: actions/setup-python@v3
          with:
            python-version: 3.8

          #1.3 run sast
        - name: Run mobsfscan
          uses: MobSF/mobsfscan@a60d10a83af68e23e0b30611c6515da604f06f65
          with:
            args: . --sarif --output results.sarif || true
    
          #1.4 upload sast result
        - name: Upload mobsfscan report
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: results.sarif

    #2.0 func tests (pc)
    func-tests:
      permissions:
        contents: read # for actions/checkout to fetch code
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      runs-on: ubuntu-latest

      steps:
        #2.1 checkout 
        - uses: actions/checkout@v4

        #2.2 setup java
        - name: Set up JDK 18
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin'
            java-version: '18'

        #2.3 grant permissions
        - name: Grant execute permission for gradlew
          run: chmod +x gradlew

        #2.4 run func tests
        - name: Run Tests
          run: ./gradlew testDebugUnitTest
        
        #2.5 upload func test result
        - name: Upload Test Results
          uses: actions/upload-artifact@v3
          with:
            name: test-results
            path: app/build/reports/tests
    
    # 3.0 inst-test
    inst-tests: 
        runs-on: ubuntu-20.04

        steps:
        - uses: actions/checkout@v4

        # 3.1 set up jdk
        - name: Set up JDK 18
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin'
            java-version: '18'
          
        # 3.2 grant permissions
        - name: Grant execute permission for gradlew
          run: chmod +x gradlew

        # 3.3 build test and actual apk
        - name: Build with Gradle (.apk file)
          run: ./gradlew assembleDebug assembleAndroidTest

        # 3.4 run inst test 
        - name: Run tests
          uses: emulator-wtf/run-tests@v0
          with:
            api-token: ${{ secrets.EMULATORWTFKEY }}
            app: app/build/outputs/apk/debug/app-debug.apk
            test: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
            outputs-dir: build/test-results

        # 3.5 push test report
        - name: Publish test report
          uses: mikepenz/action-junit-report@v2
          if: always() # always run even if the tests fail
          with:
            report_paths: 'build/test-results/**/*.xml'
        


    #4.0 build
    build:
        needs: [sast, func-tests, inst-tests]
        name: Build and Test
        runs-on: ubuntu-latest

        steps:
          #4.1 checkout
        - name: Checkout Repository
          uses: actions/checkout@v4

          #4.2 set up java
        - name: Set up JDK 18
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin'
            java-version: '18'
          
          #4.3 grant permissions
        - name: Grant execute permission for gradlew
          run: chmod +x gradlew

          #4.4.1 build apk file
        - name: Build with Gradle (.apk file)
          run: ./gradlew build

          #4.4.2 upload apk
        - name: Upload APK
          uses: actions/upload-artifact@v3
          with:
            name: secondserving-pipeline-build.apk
            path: ./app/build/outputs/apk/debug/app-debug.apk
          
          #4.5.1 build aab file
        - name: Bundle with Gradle (.aab file)
          run: ./gradlew bundle

          #4.5.2 upload aab file
        - name: Upload AAB
          uses: actions/upload-artifact@v3
          with:
            name: secondserving-pipeline-bundle.aab
            path: app/build/outputs/bundle/debug/app-debug.aab

        # might need to upload to play store maybe
        